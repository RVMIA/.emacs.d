#+TITLE: Preferences
* Tab width
#+begin_src emacs-lisp
  (setq tab-width 8)
#+end_src

* Turn off Backups
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+end_src
* Scroll Conservatively
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src
* No Bell
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src
* Type Y instead of Yes when killing active buffer
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
* Enable Ibuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+end_src

* Enable IDO Mode
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src
* Electric Pairs
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})
			      ))
  (electric-pair-mode t)
#+end_src
* Code in current window
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src
* Fill in Source Block Language
#+begin_src emacs-lisp
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("hs" . "src haskell"))
#+end_src

* Visual Line Mode
#+begin_src emacs-lisp
  (global-visual-line-mode 1)
#+end_src

* IBuffer customization
** Groups
#+begin_src emacs-lisp
    (setq ibuffer-saved-filter-groups
	  (quote (("default"
		   ("dired" (mode . dired-mode))
		   ("errors" (or
			      (name . "^\\*Backtrace\\*$")))
		   ("emacs" (or
			     (name . "^\\*scratch\\*$")
			     (name . "^\\*dashboard\\*$")
			     (name . "^\\*Completions\\*$")
			     (name . "^\\*Messages\\*$")))
		   ("emacs config" (or
				    (filename . "/.config/emacs/")))
		   ))))


  (add-hook 'ibuffer-mode-hook
	      (lambda ()
		(ibuffer-switch-to-saved-filter-groups "default")))
#+end_src

** Hide title and summary
#+begin_src emacs-lisp
  (defadvice ibuffer-update-title-and-summary (after remove-column-titles)
    (save-excursion
      (set-buffer "*Ibuffer*")
      (toggle-read-only 0)
      (goto-char 1)
      (search-forward "-\n" nil t)
      (delete-region 1 (point))
      (let ((window-min-height 1)) 
	;; save a little screen estate
	(shrink-window-if-larger-than-buffer))
      (toggle-read-only)))

  (ad-activate 'ibuffer-update-title-and-summary)
#+end_src
