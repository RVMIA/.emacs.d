
#+Title: Eye Candy
* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 5)))
    (setq dashboard-startup-banner 'official)
    (setq dashboard-center-content t)
    (setq dashboard-show-shortcuts nil)
    (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))))
#+end_src

* Compress symbols (lambda = Î»)
#+begin_src emacs-lisp
  (use-package pretty-mode
    :ensure t)
  (when window-system
    (global-pretty-mode t)
    (global-prettify-symbols-mode t))

#+end_src

* Hide Menu Bars
#+begin_src emacs-lisp
(tool-bar-mode 0)
(menu-bar-mode 0)
(scroll-bar-mode 0)
;(setq inhibit-startup-message t)
#+end_src

* Line Numbers
#+begin_src emacs-lisp
  ;;  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'menu-bar--display-line-numbers-mode-relative)
#+end_src

* Modeline Rows and Columns
#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src

* Spaceline
#+begin_src emacs-lisp
  ;; (use-package spaceline
  ;;   :ensure t
  ;;   :config
  ;;   (require `spaceline-config)
  ;;   (setq powerline-default-separator (quote arrow))
  ;;   (spaceline-spacemacs-theme))
#+end_src
* smart-mode-line
#+begin_src emacs-lisp
  ;; (use-package smart-mode-line
    ;; :ensure t
    ;; :config
    ;; (setq sml/no-confirm-load-theme t)
  ;;   (setq sml/theme 'light))
  ;; ( sml/setup)
#+end_src
* Powerline
#+begin_src emacs-lisp
  (use-package powerline
	      :ensure t)
  (powerline-default-theme)
#+end_src

* Diminish modes from modeline
#+begin_src emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish `hungry-delete-mode)
    (diminish `beacon-mode)
    (diminish `subword-mode)
    (diminish `rainbow-mode)
    (diminish `which-key-mode)
    (diminish `visual-line-mode))
#+end_src

* Org Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src

* Clock
#+begin_src emacs-lisp
  (display-time-mode 1)
#+end_src

* Beacon
#+begin_src emacs-lisp
  (use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+end_src

* Rainbow Mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode)
    (add-hook 'fundamental-mode-hook 'rainbow-mode)
    (rainbow-mode 1))
#+end_src

* Rainbow Delimiter
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src

* Dimmer
#+begin_src emacs-lisp
  (use-package dimmer
    :ensure t
    :config
    (dimmer-configure-which-key)
    (dimmer-configure-helm)
    (dimmer-mode t))
#+end_src

* Theme / Font
#+begin_src emacs-lisp

  (if (daemonp)
      (add-hook 'after-make-frame-functions
		(lambda (frame)
		  (when (eq (length (frame-list)) 2))
		  (progn
		    (select-frame frame)
		    (load-theme 'ame t)
		    (set-frame-font "Iosevka-18" nil t t)))))
    (load-theme 'ame t)
    (set-frame-font "Iosevka-18" nil t t)

#+end_src

* Auto themer
#+begin_src emacs-lisp
  (use-package autothemer
    :ensure t)
#+end_src
