#+TITLE: EMACS CONFIG

* VTerm
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)

  (use-package multi-vterm
    :ensure t)
#+end_src

* Which-Key
#+begin_src emacs-lisp
  (use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+end_src
* Auto Completion
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src

* Avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src
* Hungry Delete
#+begin_src emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+end_src
* Sudo Edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("C-c s" . sudo-edit))
#+end_src
* Kill Ring Popup
#+begin_src emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+end_src

* Require
#+begin_src emacs-lisp
(require 'org)
#+end_src

* IDO-Vertical
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src
* Smex
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+end_src

* Switch Window
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "h" "j" "k" "l"))
    (setq switch-window-shortcut-appearance 'text)
    :bind
    ([remap other-window] . switch-window))
#+end_src

* Modes
** Haskell Mode
#+begin_src emacs-lisp
  (use-package haskell-mode
    :ensure t)
#+end_src


** SLY
#+begin_src emacs-lisp
  (use-package sly
    :ensure t
    :config
    (setq inferior-lisp-program (executable-find "sbcl")))
#+end_src
