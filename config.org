* Terminal
** Setting default shell to bash
#+begin_src emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+end_src
* Emacs
** Packages
*** Which-Key
#+begin_src emacs-lisp
  (use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+end_src
*** Beacon
#+begin_src emacs-lisp
  (use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+end_src
*** Avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src
*** Rainbow Mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode)
    (add-hook 'fundamental-mode-hook 'rainbow-mode)
    (rainbow-mode 1))

#+end_src
*** Hungry Delete
#+begin_src emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+end_src
*** Sudo Edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("C-c s" . sudo-edit))
#+end_src
*** Rainbow Delimiter
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+end_src
*** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 5)))
    (setq dashboard-startup-banner 'official)
    (setq dashboard-banner-logo-title "why do they call it oven when you of in the cold food of out hot eat the food")
    (setq dashboard-center-content t)
    (setq dashboard-show-shortcuts nil)
    (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    )
#+end_src
*** Clock
#+begin_src emacs-lisp
  (display-time-mode 1)
#+end_src
** Turn off Backups
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+end_src
** Scroll Conservatively
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src
** No Bell
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Type Y instead of Yes when killing active buffer
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
** Compress symbols (lambda = Î»)
#+begin_src emacs-lisp
  (when window-system (global-prettify-symbols-mode t))
#+end_src
** Hide Fancy Bloat
#+begin_src emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
;(setq inhibit-startup-message t)
#+end_src
** Cofig edit/reload
*** Edit
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src
*** Reload
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") `config-reload)
#+end_src

** Electric Pairs
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      ))
  (electric-pair-mode t)
#+end_src
** Modeline
*** Rows and Cols
#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src
*** Spaceline
#+begin_src emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require `spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+end_src
*** Diminish
#+begin_src emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish `hungry-delete-mode)
    (diminish `beacon-mode)
    (diminish `subword-mode)
    (diminish `rainbow-mode)
    (diminish `which-key-mode))
#+end_src
** Kill Ring Popup
#+begin_src emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+end_src
* Org
** Org Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src

** Fill in Source Block Language
#+begin_src emacs-lisp
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+end_src
** Code in current window
#+begin_src emacs-lisp
    (setq org-src-window-setup 'current-window)
    
#+end_src
* IDO
** Enable IDO Mode
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src
** IDO-Vertical
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src
** Smex
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+end_src

** Switch Buffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+end_src
* Buffers
** Enable Ibuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+end_src

** Kill Current Buffer
#+begin_src emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+end_src
** Switch Window
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "h" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+end_src

*** Window Splitting Function
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src
** Kill All Buffers
#+begin_src emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+end_src
* QoL Functions
** Kill Whole Word
#+begin_src emacs-lisp
  (defun kill-whole-word()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+end_src

** Copy Whole Line
#+begin_src emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)

#+end_src
** Auto Completion
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src
* EXWM (Commented out)
** dMenu
#+begin_src emacs-lisp
;  (use-package dmenu
;   :ensure t
;    :bind
;    ("s-p" . 'dmenu)) 
#+end_src
** EXWM
#+begin_src emacs-lisp
;  (use-package exwm
;    :ensure t
;    :config
;    (require 'exwm-config)
;    (exwm-config-default))
#+end_src

** systray
#+begin_src emacs-lisp
;  (require 'exwm-systemtray)
;  (exwm-systemtray-enable)
#+end_src

** Delete Workspaces
#+begin_src emacs-lisp
;  (global-set-key (kbd "s-k") 'exwm-workspace-delete)
;  (global-set-key (kbd "s-w") 'exwm-workspace-swap)
#+end_src




* EAF
#+begin_src emacs-lisp
  (use-package eaf
    :load-path "~/.emacs.d/site-lisp/emacs-application-framework"
    :custom
    ; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
    (eaf-browser-continue-where-left-off t)
    (eaf-browser-enable-adblocker t)
    (browse-url-browser-function 'eaf-open-browser)
    :config
    (defalias 'browse-web #'eaf-open-browser)
    (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
    (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
    (eaf-bind-key nil "M-q" eaf-browser-keybinding)) ;; unbind, see more in the Wiki
  (require 'eaf-browser)
  (require 'eaf-pdf-viewer)
#+end_src
